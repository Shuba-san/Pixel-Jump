<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pixel Runner - Endless Runner Game</title>
    <style>
        /* Global Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Courier New', monospace;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #2c3e50;
            overflow: hidden;
        }
        
        #game-container {
            position: relative;
            width: 800px;
            height: 300px;
            max-width: 100%;
            background-color: #f0f0f0;
            overflow: hidden;
            border: 4px solid #333;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }
        
        #game-canvas {
            display: block;
            background-color: #f0f0f0;
        }
        
        /* Game UI */
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            text-align: center;
            z-index: 10;
        }
        
        .screen.hidden {
            display: none;
        }
        
        .title {
            font-size: 36px;
            margin-bottom: 20px;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 2px;
        }
        
        .subtitle {
            font-size: 18px;
            margin-bottom: 20px;
        }
        
        .btn {
            background-color: #27ae60;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            font-family: 'Courier New', monospace;
            font-weight: bold;
            transition: transform 0.1s;
        }
        
        .btn:hover {
            background-color: #2ecc71;
            transform: scale(1.05);
        }
        
        .btn:active {
            transform: scale(0.95);
        }
        
        #score-display {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            color: #333;
            font-weight: bold;
            padding: 5px 10px;
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 5px;
            z-index: 5;
        }
        
        /* Responsive adjustments */
        @media (max-width: 820px) {
            #game-container {
                width: 95vw;
                height: calc(95vw * 0.375); /* Maintain aspect ratio */
            }
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="game-canvas"></canvas>
        <div id="score-display">Score: 0</div>
        
        <!-- Start Screen -->
        <div id="start-screen" class="screen">
            <h1 class="title">Pixel Runner</h1>
            <p class="subtitle">Press Space or Up Arrow to Jump<br>Avoid obstacles and survive as long as possible!</p>
            <button id="start-btn" class="btn">Start Game</button>
        </div>
        
        <!-- Game Over Screen -->
        <div id="game-over-screen" class="screen hidden">
            <h1 class="title">Game Over</h1>
            <p id="final-score" class="subtitle">Your score: 0</p>
            <button id="restart-btn" class="btn">Play Again</button>
        </div>
    </div>

    <script>
        // Game Constants and Variables
        const GAME_WIDTH = 800;
        const GAME_HEIGHT = 300;
        const GROUND_HEIGHT = 30;
        const GRAVITY = 0.6;
        const JUMP_FORCE = -15;
        
        // DRAMATICALLY REDUCED SPEED VALUES
        const INITIAL_SPEED = 1.5;  // Reduced from 3 to 1.5
        const SPEED_INCREMENT = 0.00005;  // Reduced from 0.0001 to 0.00005
        const MAX_SPEED = 4;  // Reduced from 8 to 4
        
        // SIGNIFICANTLY INCREASED OBSTACLE GAPS
        const OBSTACLE_MIN_GAP = 1200;  // Increased from 800 to 1200
        const OBSTACLE_MAX_GAP = 2400;  // Increased from 1800 to 2400
        
        // Get DOM Elements
        const canvas = document.getElementById('game-canvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score-display');
        const startScreen = document.getElementById('start-screen');
        const gameOverScreen = document.getElementById('game-over-screen');
        const startBtn = document.getElementById('start-btn');
        const restartBtn = document.getElementById('restart-btn');
        const finalScore = document.getElementById('final-score');
        
        // Set canvas dimensions
        canvas.width = GAME_WIDTH;
        canvas.height = GAME_HEIGHT;
        
        // Game State
        let gameRunning = false;
        let score = 0;
        let speed = INITIAL_SPEED;
        let lastTime = 0;
        let obstacles = [];
        let nextObstacleDistance = getRandomGap();
        let dayNightCycle = 0;
        
        // Player Character
        const player = {
            x: 50,
            y: GAME_HEIGHT - GROUND_HEIGHT - 40,
            width: 30,
            height: 40,
            velocityY: 0,
            isJumping: false,
            draw() {
                // Draw player (simple robot character)
                ctx.fillStyle = '#3498db';
                
                // Body
                ctx.fillRect(this.x, this.y, this.width, this.height);
                
                // Eyes
                ctx.fillStyle = 'white';
                ctx.fillRect(this.x + this.width - 10, this.y + 8, 5, 5);
                
                // Legs during run animation - SLOWED DOWN ANIMATION
                if (!this.isJumping) {
                    // Changed animation speed to be tied to a slower count
                    const legPosition = Math.floor(score / 10) % 2 === 0;
                    
                    if (legPosition) {
                        // Left leg forward
                        ctx.fillStyle = '#2980b9';
                        ctx.fillRect(this.x, this.y + this.height, 10, 5);
                        ctx.fillRect(this.x + this.width - 10, this.y + this.height, 5, 10);
                    } else {
                        // Right leg forward
                        ctx.fillStyle = '#2980b9';
                        ctx.fillRect(this.x, this.y + this.height, 5, 10);
                        ctx.fillRect(this.x + this.width - 10, this.y + this.height, 10, 5);
                    }
                }
            },
            update() {
                // Apply gravity
                this.velocityY += GRAVITY;
                this.y += this.velocityY;
                
                // Ground collision detection
                const groundY = GAME_HEIGHT - GROUND_HEIGHT - this.height;
                if (this.y > groundY) {
                    this.y = groundY;
                    this.velocityY = 0;
                    this.isJumping = false;
                }
            },
            jump() {
                if (!this.isJumping) {
                    this.velocityY = JUMP_FORCE;
                    this.isJumping = true;
                }
            },
            reset() {
                this.y = GAME_HEIGHT - GROUND_HEIGHT - this.height;
                this.velocityY = 0;
                this.isJumping = false;
            }
        };
        
        // Obstacle Class
        class Obstacle {
            constructor(x) {
                this.x = x;
                this.width = 20 + Math.random() * 30;
                this.height = 30 + Math.random() * 50;
                this.y = GAME_HEIGHT - GROUND_HEIGHT - this.height;
            }
            
            update(deltaTime) {
                this.x -= speed * deltaTime;
            }
            
            draw() {
                // Draw obstacle (cactus-like)
                ctx.fillStyle = '#27ae60';
                
                // Main stem
                ctx.fillRect(this.x + this.width/3, this.y, this.width/3, this.height);
                
                // Side spikes
                if (this.width > 30) {
                    // Left spike
                    ctx.fillRect(this.x, this.y + this.height * 0.3, this.width/3, this.height/5);
                    
                    // Right spike
                    ctx.fillRect(this.x + this.width * 2/3, this.y + this.height * 0.5, this.width/3, this.height/5);
                }
            }
            
            collidesWith(player) {
                return (
                    this.x < player.x + player.width &&
                    this.x + this.width > player.x &&
                    this.y < player.y + player.height &&
                    this.y + this.height > player.y
                );
            }
        }

        // Background Elements
        const clouds = [];
        
        function addCloud() {
            clouds.push({
                x: GAME_WIDTH,
                y: 50 + Math.random() * 80,
                width: 60 + Math.random() * 40,
                // SLOWED DOWN CLOUDS
                speed: 0.2 + Math.random() * 0.3 // Reduced from 0.5 to 0.2
            });
        }
        
        // Initialize some clouds
        for (let i = 0; i < 4; i++) {
            clouds.push({
                x: Math.random() * GAME_WIDTH,
                y: 50 + Math.random() * 80,
                width: 60 + Math.random() * 40,
                // SLOWED DOWN CLOUDS
                speed: 0.2 + Math.random() * 0.3 // Reduced from 0.5 to 0.2
            });
        }
        
        // Game Functions
        function getRandomGap() {
            return OBSTACLE_MIN_GAP + Math.random() * (OBSTACLE_MAX_GAP - OBSTACLE_MIN_GAP);
        }
        
        function updateScore(deltaTime) {
            // SLOWED DOWN SCORE INCREASE
            score += deltaTime * speed * 0.05; // Reduced from 0.1 to 0.05
            scoreDisplay.textContent = `Score: ${Math.floor(score)}`;
        }
        
        function resetGame() {
            score = 0;
            speed = INITIAL_SPEED;
            obstacles = [];
            nextObstacleDistance = getRandomGap();
            player.reset();
            dayNightCycle = 0;
        }
        
        function startGame() {
            gameRunning = true;
            startScreen.classList.add('hidden');
            gameOverScreen.classList.add('hidden');
            resetGame();
            lastTime = performance.now();
            requestAnimationFrame(gameLoop);
        }
        
        function gameOver() {
            gameRunning = false;
            finalScore.textContent = `Your score: ${Math.floor(score)}`;
            gameOverScreen.classList.remove('hidden');
        }
        
        // Update game elements
        function update(deltaTime) {
            if (!gameRunning) return;
            
            // NORMALIZE DELTA TIME TO PREVENT SPEED ISSUES
            // Cap delta time to prevent large jumps if tab loses focus
            const cappedDeltaTime = Math.min(deltaTime, 100);
            
            // Update player
            player.update();
            
            // Update speed - ADJUSTED: Made speed increase extremely gradual
            speed = Math.min(INITIAL_SPEED + score * SPEED_INCREMENT, MAX_SPEED);
            
            // Update background elements
            for (let i = clouds.length - 1; i >= 0; i--) {
                clouds[i].x -= clouds[i].speed * cappedDeltaTime;
                if (clouds[i].x < -clouds[i].width) {
                    clouds.splice(i, 1);
                }
            }
            
            // Add new cloud occasionally - REDUCED FREQUENCY
            if (Math.random() < 0.002 * cappedDeltaTime) { // Reduced from 0.005
                addCloud();
            }
            
            // Update day/night cycle - SLOWED DOWN
            dayNightCycle += cappedDeltaTime * 0.0005; // Reduced from 0.001
            if (dayNightCycle > 4) {
                dayNightCycle = 0;
            }
            
            // Update obstacles
            nextObstacleDistance -= speed * cappedDeltaTime;
            if (nextObstacleDistance <= 0) {
                obstacles.push(new Obstacle(GAME_WIDTH));
                nextObstacleDistance = getRandomGap();
            }
            
            for (let i = obstacles.length - 1; i >= 0; i--) {
                obstacles[i].update(cappedDeltaTime);
                
                // Check collision with player
                if (obstacles[i].collidesWith(player)) {
                    gameOver();
                    return;
                }
                
                // Remove off-screen obstacles
                if (obstacles[i].x + obstacles[i].width < 0) {
                    obstacles.splice(i, 1);
                }
            }
            
            // Update score
            updateScore(cappedDeltaTime);
        }
        
        // Draw game elements
        function draw() {
            // Clear canvas
            ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);
            
            // Background color based on day/night cycle
            const darkness = Math.sin(dayNightCycle) * 0.3;
            const bgColor = `rgb(${240 - darkness * 80}, ${240 - darkness * 80}, ${240 - darkness * 80})`;
            ctx.fillStyle = bgColor;
            ctx.fillRect(0, 0, GAME_WIDTH, GAME_HEIGHT);
            
            // Draw clouds
            ctx.fillStyle = `rgba(255, 255, 255, ${0.8 - darkness * 0.3})`;
            for (const cloud of clouds) {
                const cloudHeight = cloud.width * 0.4;
                ctx.beginPath();
                ctx.arc(cloud.x, cloud.y, cloudHeight * 0.5, 0, Math.PI * 2);
                ctx.arc(cloud.x + cloudHeight * 0.8, cloud.y - cloudHeight * 0.2, cloudHeight * 0.6, 0, Math.PI * 2);
                ctx.arc(cloud.x + cloudHeight * 1.6, cloud.y, cloudHeight * 0.5, 0, Math.PI * 2);
                ctx.fill();
            }
            
            // Draw ground
            ctx.fillStyle = '#8B4513';
            ctx.fillRect(0, GAME_HEIGHT - GROUND_HEIGHT, GAME_WIDTH, GROUND_HEIGHT);
            
            // Add ground details
            ctx.fillStyle = '#A0522D';
            for (let i = 0; i < GAME_WIDTH; i += 40) {
                ctx.fillRect(i, GAME_HEIGHT - GROUND_HEIGHT, 20, 5);
            }
            
            // Draw obstacles
            for (const obstacle of obstacles) {
                obstacle.draw();
            }
            
            // Draw player
            player.draw();
        }
        
        // Game Loop
        function gameLoop(timestamp) {
            const deltaTime = timestamp - lastTime;
            lastTime = timestamp;
            
            update(deltaTime);
            draw();
            
            if (gameRunning) {
                requestAnimationFrame(gameLoop);
            }
        }
        
        // Event Listeners
        document.addEventListener('keydown', (e) => {
            if ((e.code === 'Space' || e.code === 'ArrowUp') && gameRunning) {
                player.jump();
                e.preventDefault(); // Prevent page scrolling
            }
        });
        
        // Touch controls for mobile
        canvas.addEventListener('touchstart', (e) => {
            if (gameRunning) {
                player.jump();
                e.preventDefault(); // Prevent default touch behavior
            }
        });
        
        // Button controls
        startBtn.addEventListener('click', startGame);
        restartBtn.addEventListener('click', startGame);
        
        // Responsive canvas
        function resizeCanvas() {
            const container = document.getElementById('game-container');
            const ratio = GAME_WIDTH / GAME_HEIGHT;
            
            if (window.innerWidth < GAME_WIDTH + 20) {
                const newWidth = window.innerWidth - 20;
                const newHeight = newWidth / ratio;
                
                container.style.width = newWidth + 'px';
                container.style.height = newHeight + 'px';
                
                // Scale canvas to fit container while maintaining aspect ratio
                canvas.style.width = '100%';
                canvas.style.height = '100%';
            } else {
                container.style.width = GAME_WIDTH + 'px';
                container.style.height = GAME_HEIGHT + 'px';
                canvas.style.width = '100%';
                canvas.style.height = '100%';
            }
        }
        
        // Initial setup
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
    </script>
</body>
</html>
